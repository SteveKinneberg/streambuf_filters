# SCons file for setting up GoogleTest and GoogleMock

# This file is unfortunately more complex than is really desirable.  This is due
# the rather inconsistent nature by which various distributions provide gtest
# and gmock.  For example, Fedora provides gtest as a pre-built binary library,
# but only provides gmock as build-able source.  Worse, the gmock-config script
# seems to imply that the pre-built gmock library already exists in a standard
# location.  Fedora also modifies the #include directives in the gtest/gmock
# source so that the '-I' parameter would point to the directory with the
# gtest/gmock source rather than the parent directory.  Ubuntu, on the other
# hand, may have older versions of gtest and gmock in source form only and will
# require the '-I' parameter to point to the parent directory with the
# gtest/gmock source.
#
# This complexity gets exacerbated by the fact that we need to support building
# gtest and gmock from downloaded sources in the event that a developer needs to
# override the system's version of each.

import os

Import('env', 'custom_tests')

# Minimum version of GoogleTest and GoogleMock to use
version = '1.8.0'


#######################################################
# Build variables
#######################################################
vars = Variables()
vars.Add(PathVariable('GTEST_DIR',
                      'The path to Google Test sources.',
                      os.environ.get('GTEST_DIR'),
                      PathVariable.PathIsDir))
vars.Add(PathVariable('GMOCK_DIR',
                      'The path to Google Mock sources.',
                      os.environ.get('GMOCK_DIR'),
                      PathVariable.PathIsDir))
vars.Add(EnumVariable('TEST_V',
                      'Unit test run verbosity.',
                      'on_failure',
                      [ 'always', 'on_failure', 'never' ],
                      { '1':     'always',
                        'true':  'always',
                        '0':     'never',
                        'false': 'never' },
                      2))
vars.Add('GTEST_FILTER', 'Only run named tests (passed to --gtest_filter=)')
vars.Update(env)
Help(vars.GenerateHelpText(env))


#######################################################
# Custom Builders
#######################################################
def RunTestMessage(s, target, source, env):
    if 'TESTCOMSTR' in env:
        print(env.subst(env['TESTCOMSTR'], 1, target, source))
    else:
        print(s)

def RunTestGenerator(source, target, env, for_signature):
    test_filter = env.get('GTEST_FILTER', '')
    if test_filter:
        test_filter = ' --gtest_filter=' + test_filter
    if env['TEST_V'] == 'always':
        action = [ '%s%s --gtest_color=yes > %s; cat %s' % (source[0], test_filter, target[0], target[0]) ]
    elif env['TEST_V'] == 'on_failure':
        action = [ '%s%s --gtest_color=yes > %s || cat %s' % (source[0], test_filter, target[0], target[0]) ]
    else:
        action = [ '%s%s --gtest_color=yes > %s' % (source[0], test_filter, target[0]) ]
    return action

def RunTestEmitter(target, source, env):
    target = [ '%s.results' % source[0] ]
    if env['COVERAGE'] and callable(env.get('coverage_file_emitter')):
        target.extend(env['coverage_file_emitter'](env, source))
    return target, source


#######################################################
# Configure for Google Test/Mock (Build if necessary)
#######################################################
def SetupGoogleTool(env, version, namemap):
    force_build_source = False
    gtool_all_file = None
    gtool_src_dir = None
    gtool_main_file = None

    # Find the Google Test/Mock source code
    if env.get('G%(NAME)s_DIR' % namemap):
        # Source directory given - use that instead of version installed on system
        force_build_source = True
        gtool_src_dir = env.Dir('$G%(NAME)s_DIR' % namemap)
        gtool_all_file = env.File('$G%(NAME)s_DIR/src/g%(name)s-all.cc' % namemap)
        gtool_main_file = env.File('$G%(NAME)s_DIR/src/g%(name)s_main.cc' % namemap)
        env.Append(CCFLAGS = [ '-isystem', '$G%(NAME)s_DIR/include' % namemap ])

    else:
        gtool_all_file = env.FindFile('g%(name)s-all.cc' % namemap, [
            '/usr/src/g%(name)s' % namemap,
            '/usr/src/g%(name)s/src' % namemap,
            '/usr/local/src/g%(name)s' % namemap,
            '/usr/local/src/g%(name)s/src' % namemap
        ])

        if gtool_all_file:
            gtool_src_dir = env.Dir(os.path.dirname(str(gtool_all_file)))
            gtool_main_file = env.File(str(gtool_src_dir) + '/g%(name)s_main.cc' % namemap)

            gtool_h_file = env.FindFile('g%(name)s/g%(name)s.h' % namemap, [
                '/usr/include',
                '/usr/local/include'
            ])
            if not gtool_h_file:
                gtool_h_file = env.FindFile('g%(name)s/g%(name)s.h' % namemap, [
                    gtool_src_dir,
                    os.path.dirname(str(gtool_src_dir)) + '/include'
                ])
                gtool_env.Append(CCFLAGS = [ '-isystem', os.path.basename(str(gtool_h_file)) ])

    # Temporarily remove '#dist/$TP/include' and '#dist/$TP/lib' from their respective
    # path variables to properly detect the system gtool libraries.
    origCPPPATH = env.get('CPPPATH', [])[:]
    origLIBPATH = env.get('LIBPATH', [])[:]
    env.Replace(CPPPATH = [ p for p in origCPPPATH if p != env['install_incdir']])
    env.Replace(LIBPATH = [ p for p in origLIBPATH if p != env['install_libdir']])

    config = Configure(env)
    have_pre_built_lib = config.CheckLib('g%(name)s' % namemap,
                                         language = 'c++',
                                         autoadd = (not force_build_source))
    have_pre_built_libmain = config.CheckLib('g%(name)s_main' % namemap,
                                             language = 'c++',
                                             autoadd = (not force_build_source))
    env = config.Finish()

    env.Replace(CPPPATH = origCPPPATH)
    env.Replace(LIBPATH = origLIBPATH)

    have_lib_source = bool(gtool_all_file)
    have_libmain_source = bool(gtool_main_file)

    build_lib = force_build_source or (not have_pre_built_lib and have_lib_source)
    build_lib_main = force_build_source or (not have_pre_built_libmain and have_libmain_source)

    # Google Test/Mock source code will generate a lot of errors/warnings with
    # our settings, so create a new build environment with select options
    # removed.
    gtool_env = env.Clone()
    pred = lambda x: x not in [
        '-Wundef',
        '-Wzero-as-null-pointer-constant',
        '-Wuseless-cast',
        '--coverage'
        ]
    gtool_env.Replace(CCFLAGS  = filter(pred, env['CCFLAGS']),
                      CXXFLAGS = filter(pred, env['CXXFLAGS']),
                      CFLAGS   = filter(pred, env['CFLAGS']))

    if build_lib:
        # Fedora fixes the include paths in the Google Test/Mock, but Ubuntu
        # doesn't so we need 2 paths to the source in order to build *-all.cc.
        gtool_env.Append(CPPPATH = gtool_src_dir)
        if str(gtool_src_dir).endswith('/src'):
            gtool_env.Append(CPPPATH = os.path.dirname(str(gtool_src_dir)))

        gtool_all_os = gtool_env.SharedObject('g%(name)s-all' % namemap, gtool_all_file)
        gtool_lib_so = gtool_env.SharedLibrary('g%(name)s' % namemap, gtool_all_os)
        gtool_env.Install(gtool_env['install_libdir'], gtool_lib_so)
        env.Append(LIBS = [str(gtool_lib_so[0])])

    if build_lib_main:
        gtool_main_env = gtool_env.Clone()
        if build_lib:
            gtool_main_env.Append(LIBS = [str(gtool_lib_so[0])])
        gtool_main_os = gtool_main_env.SharedObject('g%(name)s-main' % namemap, gtool_main_file)
        gtool_libmain_so = gtool_main_env.SharedLibrary('g%(name)s_main' % namemap, gtool_main_os)
        gtool_main_env.Install(gtool_main_env['install_libdir'], gtool_libmain_so)

    return (have_pre_built_lib or build_lib) and (have_pre_built_libmain or build_lib_main)

test_namemap = {
    'name': 'test',
    'Name': 'Test',
    'NAME': 'TEST'
}
mock_namemap = {
    'name': 'mock',
    'Name': 'Mock',
    'NAME': 'MOCK'
}

env['have_gtest'] = SetupGoogleTool(env, version, test_namemap)
env['have_gmock'] = env['have_gtest'] and SetupGoogleTool(env, version, mock_namemap)

# Macros from Google Test may declare variables that are unused; particularly
# with parameter-ized tests.
env.Append(CCFLAGS = [ '-Wno-unused-variable' ])

env.AppendENVPath('LD_LIBRARY_PATH', env['install_libdir'])

env.Append(BUILDERS = { 'RunTest' : Builder(generator = RunTestGenerator,
                                            emitter = RunTestEmitter,
                                            PRINT_CMD_LINE_FUNC = RunTestMessage) })
