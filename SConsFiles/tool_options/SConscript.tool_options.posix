# FIXME: This contains GCC specific things.  This needs to support LLVM/Clang too.
# FIXME: Code coverage should be split off into it's own file.

import os

Import('env', 'custom_tests')

#######################################################
# Toolchain environment variables
#######################################################
# Add the TERM environment variable if it exists for color output from GCC.
if 'TERM' in os.environ:
    env.Append(ENV = { 'TERM': os.environ['TERM'] })

if 'PKG_CONFIG_PATH' in os.environ:
    env['ENV']['PKG_CONFIG_PATH'] = os.environ.get('PKG_CONFIG_PATH', '')
    env['ENV']['PKG_CONFIG_SYSROOT_DIR'] = os.environ.get('PKG_CONFIG_SYSROOT_DIR', '')


#######################################################
# Tool flag configuration checks
#######################################################
config = Configure(env, custom_tests = custom_tests)

# Check for C and C++ compilers
env['required'].update({
    env['CC']:    config.CheckCC(),
    env['SHCC']:  config.CheckSHCC(),
    env['CXX']:   config.CheckCXX(),
    env['SHCXX']: config.CheckSHCXX(),
})

# Debug/Release build flags
if env['NDEBUG']:
    config.CheckCCFlag('-flto')
    config.CheckCCFlag('-O3')
    config.CheckLinkFlag('-flto')
    config.CheckLinkFlag('-s')
else:
    config.CheckCCFlag('-g')
    config.CheckCCFlag('-Og')

# Embed paths to built shared libraries into non-production build executables.
if not env['PRODUCTION']:
    config.CheckLinkFlag("-Wl,-rpath='$$ORIGIN/../lib'")

# Check C/C++ flags
config.CheckCCFlag('-fdiagnostics-color=auto')  # Makes GCC's errors/warnings colorful
config.CheckCCFlag('-pipe')                     # Skip intermediary files
config.CheckCCFlag('-pedantic')                 # Make sure our code conforms to language standards
config.CheckCCFlag('-Wall')                     # Enable the many, highly useful warnings
config.CheckCCFlag('-Wcast-align')              # Warn on cast alignment problems
config.CheckCCFlag('-Wcast-qual')               # Warn on type qualifier removal pointer casts
config.CheckCCFlag('-Werror')                   # Make warnings into errors
config.CheckCCFlag('-Wextra')                   # Enable more useful warnings
config.CheckCCFlag('-Wformat=2')                # Enable printf() and scanf() format checks
config.CheckCCFlag('-Wfloat-equal')             # Enable warning when comparing equivalence of floats
config.CheckCCFlag('-Wshadow')                  # Warn when a variable name shadows another
config.CheckCCFlag('-Wundef')                   # Warn if an undefined identifier is used in a #if
config.CheckCCFlag('-Wwrite-strings')           # Warn about writing into const char[]

# Check C only flags
env['required'].update({ 'C11': bool(config.CheckCFlag('-std=c11')) })

# Check C++ only flags
env['required'].update({ 'C++17': bool(config.CheckCXXFlag('-std=c++17')) })
config.CheckCXXFlag('-Woverloaded-virtual')     # Warn about hidden virtual methods in base classes
config.CheckCXXFlag('-Wctor-dtor-privacy')      # Warn about unusable classes
config.CheckCXXFlag('-Wnon-virtual-dtor')       # Warn about non-virtual destructors in classes with virtual methods
config.CheckCXXFlag('-Wold-style-cast')         # Warn about C-style casts
config.CheckCXXFlag('-Wuseless-cast')           # Warn about unnecessary casts
config.CheckCXXFlag('-Wzero-as-null-pointer-constant') # Warn about using NULL instead of nullptr

env = config.Finish()
