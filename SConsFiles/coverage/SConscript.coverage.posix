import os

Import('env', 'custom_tests')

#######################################################
# Setup GCC code coverage tools
#######################################################
env.Tool('gcccov')
env.Tool('lcov')
env.Tool('genhtml')

if env['COVERAGE']:
    config = Configure(env, custom_tests = custom_tests)
    have_coverage = (config.CheckProg(env['LCOV']) and
                     config.CheckProg(env['GENHTML']))
    env = config.Finish()

    if not have_coverage:
        env['COVERAGE'] = False
        print('*** WARNING: Code coverage reports not available: LCov and GenHtml not found')

#######################################################
# Setup GCC code coverage compiler/link options
#######################################################
if env['COVERAGE']:
    config = Configure(env, custom_tests = custom_tests)
    coverage_support = (config.CheckCCFlag('--coverage') and
                        config.CheckLinkFlag('--coverage'))
    env = config.Finish()
    if not coverage_support:
        env['COVERAGE'] = False
        print('*** WARNING: Code coverage reports not available: --coverage compiler option not supported')

#######################################################
# Setup GCC code coverage builder
#######################################################
if env['COVERAGE']:
    env.GCovInjectObjectEmitters()
    env['LCOVOPTS'] = ['-q', '--no-external']
    env['LCOVDIR'] = '#/'

    def coverage_file_emitter(env, source):
        return [ '%s.gcda' % str(source[0]) ]

    def coverage_report(env, test_prog, test_run):
        coverage_path = env.Dir(env['install_covdir'] + '/%s' % os.path.basename(test_prog[0].abspath))
        lcov = env.LCov('%s.info' % coverage_path.abspath, test_run)
        return env.GenHtml(coverage_path, lcov, GENHTMLOPTS = [ '-q', '--demangle-cpp' ])

    env['coverage_file_emitter'] = coverage_file_emitter
    env.AddMethod(coverage_report, 'CoverageReport')
